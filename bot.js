/**
 * ü§ñ AI Crypto Tracker Bot v3.2 (Render-ready)
 * - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–≤–æ–µ–π –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏:
 *   /start /help /subscribe /positions /signals /balance /close /admin + –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * - –£—Å—Ç–æ–π—á–∏–≤—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: Binance primary, CoinGecko fallback (—Å COINGECKO_API_KEY)
 * - –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (entry/–¥–µ–ø–æ–∑–∏—Ç/—Ä–∞–∑–º–µ—Ä)
 * - –ï–¥–∏–Ω—ã–π express-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (/, /health)
 * - –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫
 */

const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');

// ---------------- CONFIG -----------------
const BOT_TOKEN = process.env.BOT_TOKEN || 'YOUR_BOT_TOKEN_HERE';
const PORT = Number(process.env.PORT) || 10000;
const ADMIN_PASSWORD = process.env.ADMIN_PASS || 'crypto123';

// HTTP/axios –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å –∫ –ø—É–±–ª–∏—á–Ω—ã–º API
axios.defaults.timeout = 10000;
axios.defaults.headers.common['User-Agent'] = 'AI-Crypto-Tracker/3.2 (+render.com)';

// ---------------- STATE -----------------
// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –≤—Å—ë —ç—Ç–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ë–î (SQLite/Mongo). –ó–¥–µ—Å—å –¥–ª—è MVP ‚Äî –ø–∞–º—è—Ç—å.
const users = new Map();       // userId -> { id, username, isPremium, registeredAt, positionCount }
const positions = new Map();   // positionId -> { ... }
const awaitingInput = new Map(); // userId -> temp draft (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å flow)

// ---------------- SYMBOL MAPS ----------------
// Binance USDT –ø–∞—Ä—ã (primary provider)
const binancePair = {
  BTC: 'BTCUSDT', ETH: 'ETHUSDT', SOL: 'SOLUSDT', ADA: 'ADAUSDT',
  DOT: 'DOTUSDT', MATIC: 'MATICUSDT', LINK: 'LINKUSDT', UNI: 'UNIUSDT',
  AVAX: 'AVAXUSDT', ATOM: 'ATOMUSDT', XRP: 'XRPUSDT', DOGE: 'DOGEUSDT',
  LTC: 'LTCUSDT', BCH: 'BCHUSDT'
};

// CoinGecko ID (fallback)
const symbolMapping = {
  BTC: 'bitcoin', ETH: 'ethereum', SOL: 'solana', ADA: 'cardano',
  DOT: 'polkadot', MATIC: 'matic-network', LINK: 'chainlink', UNI: 'uniswap',
  AVAX: 'avalanche-2', ATOM: 'cosmos', XRP: 'ripple', DOGE: 'dogecoin',
  LTC: 'litecoin', BCH: 'bitcoin-cash'
};

// ---------------- HELPERS ----------------
function round(v, d = 2) {
  if (v === null || v === undefined || isNaN(v)) return 0;
  return Math.round(Number(v) * Math.pow(10, d)) / Math.pow(10, d);
}

function calcVolatility(prices) {
  const returns = [];
  for (let i = 1; i < prices.length; i++) {
    const prev = prices[i - 1];
    const cur = prices[i];
    if (prev > 0) {
      const r = (cur - prev) / prev;
      if (Number.isFinite(r)) returns.push(r);
    }
  }
  const variance = returns.length
    ? returns.reduce((a, b) => a + b * b, 0) / returns.length
    : 0;
  return Math.sqrt(variance) * Math.sqrt(365) * 100;
}

// ---------------- MARKET DATA (RESILIENT) ----------------
async function binanceFetchJson(url, params) {
  try {
    const res = await axios.get(url, { params });
    return res.data;
  } catch (e) {
    if (e.response) console.warn(`Binance ${url} ‚Üí ${e.response.status}`);
    else console.warn(`Binance ${url} ‚Üí ${e.code || e.message}`);
    throw e;
  }
}

async function fetchFromBinance(symbol) {
  const pair = binancePair[symbol];
  if (!pair) throw new Error('PAIR_NOT_SUPPORTED');

  // –æ—Å–Ω–æ–≤–Ω–æ–π –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ö–æ—Å—Ç—ã Binance
  const hosts = ['https://api.binance.com', 'https://data-api.binance.vision'];
  let ticker = null, klines = null;

  for (const host of hosts) {
    try {
      const [t, kl] = await Promise.all([
        binanceFetchJson(`${host}/api/v3/ticker/24hr`, { symbol: pair }),
        binanceFetchJson(`${host}/api/v3/klines`, { symbol: pair, interval: '1h', limit: 168 })
      ]);
      ticker = t; klines = kl;
      break;
    } catch {
      // –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ—Å—Ç
      ticker = klines = null;
    }
  }
  if (!ticker || !klines) throw new Error('BINANCE_UNAVAILABLE');

  const prices = klines.map(k => parseFloat(k[4]));   // close
  const volumes = klines.map(k => parseFloat(k[7]));  // quote asset volume (USDT)

  return {
    provider: 'Binance',
    price: parseFloat(ticker.lastPrice),
    change24h: parseFloat(ticker.priceChangePercent),
    volume24h: parseFloat(ticker.quoteVolume),
    high7d: Math.max(...prices),
    low7d: Math.min(...prices),
    avgVolume: volumes.length ? volumes.reduce((a, b) => a + b, 0) / volumes.length : 0,
    volatility: calcVolatility(prices),
    support: Math.min(...prices) * 1.02,
    resistance: Math.max(...prices) * 0.98
  };
}

async function fetchFromCoinGecko(symbol) {
  const coinId = symbolMapping[symbol];
  if (!coinId) throw new Error('COIN_NOT_SUPPORTED');

  const headers = {};
  if (process.env.COINGECKO_API_KEY) {
    headers['x-cg-demo-api-key'] = process.env.COINGECKO_API_KEY;
  }

  const [priceRes, historyRes] = await Promise.all([
    axios.get('https://api.coingecko.com/api/v3/simple/price', {
      params: {
        ids: coinId,
        vs_currencies: 'usd',
        include_24hr_change: 'true',
        include_24hr_vol: 'true'
      },
      headers
    }),
    axios.get(`https://api.coingecko.com/api/v3/coins/${coinId}/market_chart`, {
      params: { vs_currency: 'usd', days: 7 },
      headers
    })
  ]);

  const pd = priceRes.data[coinId];
  const hd = historyRes.data;

  const prices = (hd.prices || []).map(p => p[1]);
  const volumes = (hd.total_volumes || []).map(v => v[1]);

  return {
    provider: 'CoinGecko',
    price: Number(pd.usd),
    change24h: Number(pd.usd_24h_change || 0),
    volume24h: Number(pd.usd_24h_vol || 0),
    high7d: prices.length ? Math.max(...prices) : 0,
    low7d: prices.length ? Math.min(...prices) : 0,
    avgVolume: volumes.length ? volumes.reduce((a, b) => a + b, 0) / volumes.length : 0,
    volatility: calcVolatility(prices),
    support: prices.length ? Math.min(...prices) * 1.02 : 0,
    resistance: prices.length ? Math.max(...prices) * 0.98 : 0
  };
}

// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–µ—Ç—á–µ—Ä —Å fallback –∏ –ª–æ–≥–∞–º–∏
async function getMarketData(inputSymbol) {
  const symbol = String(inputSymbol || '').toUpperCase();
  if (!binancePair[symbol] && !symbolMapping[symbol]) return null;

  try {
    const md = await fetchFromBinance(symbol);
    return md;
  } catch (e) {
    console.warn('Binance failed ‚Üí fallback CoinGecko');
    try {
      const md = await fetchFromCoinGecko(symbol);
      return md;
    } catch (err) {
      console.error('CoinGecko failed:', err?.response?.status || err?.code || err?.message);
      return null;
    }
  }
}

// ---------------- POSITION & ANALYTICS ----------------
function calculateOptimalLevels(entryPrice, direction, marketData, riskPercent = 4) {
  if (!marketData) return null;
  const { support, resistance, volatility } = marketData;

  let stopLoss, takeProfit;
  if (direction === 'long') {
    const buffer = entryPrice * (volatility / 100) * 0.5;
    stopLoss = Math.min(support - buffer, entryPrice * (1 - riskPercent / 100));
    const risk = entryPrice - stopLoss;
    takeProfit = Math.max(resistance, entryPrice + risk * 2);
  } else {
    const buffer = entryPrice * (volatility / 100) * 0.5;
    stopLoss = Math.max(resistance + buffer, entryPrice * (1 + riskPercent / 100));
    const risk = stopLoss - entryPrice;
    takeProfit = Math.min(support, entryPrice - risk * 2);
  }

  return {
    stopLoss: round(stopLoss, 2),
    takeProfit: round(takeProfit, 2),
    riskPercent: Math.abs((stopLoss - entryPrice) / entryPrice * 100)
  };
}

function calculatePositionSize(deposit, entryPrice, stopLoss, riskPercent = 4) {
  const riskAmount = deposit * (riskPercent / 100);
  const priceRisk = Math.abs(entryPrice - stopLoss);
  const positionValue = priceRisk > 0 ? riskAmount / (priceRisk / entryPrice) : 0;
  const quantity = entryPrice > 0 ? positionValue / entryPrice : 0;
  return {
    quantity: round(quantity, 5),
    positionValue: round(positionValue, 2),
    riskAmount: round(riskAmount, 2)
  };
}

function calculatePnL(position, currentPrice) {
  if (position.direction === 'long') {
    return (currentPrice - position.entryPrice) * position.quantity;
  }
  return (position.entryPrice - currentPrice) * position.quantity;
}

function generateMarketSignals(position, marketData) {
  const signals = [];
  const { price, change24h, volume24h, avgVolume } = {
    price: marketData.price,
    change24h: marketData.change24h,
    volume24h: marketData.volume24h,
    avgVolume: marketData.avgVolume
  };

  const stopDistance = Math.abs(price - position.stopLoss) / Math.max(1e-9, position.stopLoss) * 100;
  const takeProfitDistance = Math.abs(price - position.takeProfit) / Math.max(1e-9, position.takeProfit) * 100;

  if (stopDistance < 2) {
    signals.push({ type: 'warning', message: 'üî¥ –í–ù–ò–ú–ê–ù–ò–ï! –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ —Å—Ç–æ–ø-–ª–æ—Å—Å—É' });
  }
  if (takeProfitDistance < 3) {
    signals.push({ type: 'profit', message: 'üéØ –ë–ª–∏–∑–∫–æ –∫ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É! –í–æ–∑–º–æ–∂–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è' });
  }
  if (avgVolume > 0 && volume24h > avgVolume * 1.5) {
    signals.push({ type: 'volume', message: 'üìà –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ –æ–±—ä—ë–º—ã ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ' });
  }
  if (Math.abs(change24h) > 8) {
    const dir = change24h > 0 ? '—Ä–æ—Å—Ç' : '–ø–∞–¥–µ–Ω–∏–µ';
    signals.push({ type: 'volatility', message: `‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${dir} ${Math.abs(change24h).toFixed(1)}%` });
  }
  return signals;
}

// ---------------- PARSER ----------------
// –£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: –≤—ã–¥–µ–ª—è–µ—Ç —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –¥–µ–ø–æ–∑–∏—Ç/—Ä–∞–∑–º–µ—Ä –∏ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –Ω–µ –ø—É—Ç–∞—Ç—å entry c –¥–µ–ø–æ–∑–∏—Ç–æ–º.
function parsePositionInput(raw) {
  const text = String(raw || '');
  const normalized = text
    .replace(/[,]/g, ' ')
    .replace(/\$/g, '')
    .replace(/\s+/g, ' ')
    .trim();

  const upper = normalized.toUpperCase();

  const symbol = Object.keys(binancePair).find(s => new RegExp(`\\b${s}\\b`).test(upper)) || null;
  const direction = /\b(LONG|–õ–û–ù–ì)\b/i.test(normalized)
    ? 'long'
    : (/\b(SHORT|–®–û–†–¢)\b/i.test(normalized) ? 'short' : null);

  // –¥–µ–ø–æ–∑–∏—Ç / —Ä–∞–∑–º–µ—Ä ‚Äî –≤—ã—Ä–µ–∑–∞–µ–º –∏—Ö —á–∏—Å–ª–∞ –∑–∞—Ä–∞–Ω–µ–µ
  const depositMatch = normalized.match(/(?:DEPOSIT|–î–ï–ü–û–ó–ò–¢|DEP|–î–ï–ü)\s*([\d.]+)/i);
  const sizeMatch = normalized.match(/(?:SIZE|–†–ê–ó–ú–ï–†|–ö–û–õ–ò–ß–ï–°–¢–í–û)\s*([\d.]+)/i);

  const deposit = depositMatch ? parseFloat(depositMatch[1]) : null;
  const size = sizeMatch ? parseFloat(sizeMatch[1]) : null;

  // —Ç–µ–ø–µ—Ä—å –∏—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç(—ã) –Ω–∞ entry price ‚Äî —á–∏—Å–ª–∞, –ò–°–ö–õ–Æ–ß–ê–Ø —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ deposit/size
  // –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –±–µ—Ä—ë–º –≤—Å–µ —á–∏—Å–ª–∞ –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Å–æ–≤–ø–∞–≤—à–∏–µ deposit/size
  const allNums = (normalized.match(/(\d+(?:\.\d+)?)/g) || []).map(Number);
  const candidates = allNums.filter(n => n !== deposit && n !== size);

  // —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –æ–±—ã—á–Ω–æ entry —Å—Ç–æ–∏—Ç —Ä—è–¥–æ–º. –ù–æ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ NLP –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —á–∏—Å–ª–æ.
  const entryPrice = candidates.length ? parseFloat(candidates[0]) : null;

  return { symbol, direction, entryPrice, deposit, size };
}

// ---------------- BOT SETUP ----------------
let bot = null;
if (!BOT_TOKEN || BOT_TOKEN === 'YOUR_BOT_TOKEN_HERE') {
  console.warn('‚ö†Ô∏è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –≤ Render.');
} else {
  bot = new TelegramBot(BOT_TOKEN, { polling: true });

  // /start ‚Äî –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!users.has(userId)) {
      users.set(userId, {
        id: userId,
        username: msg.from.username,
        isPremium: false,
        registeredAt: new Date(),
        positionCount: 0
      });
    }

    const welcomeMessage = `
ü§ñ <b>AI Crypto Tracker Bot</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

üöÄ <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø AI Crypto Tracker.  
–Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –∫—Ä–∏–ø—Ç–æ–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.  

<b>–ß—Ç–æ —è —É–º–µ—é:</b>  
üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ç–æ–ø-–ª–æ—Å—Å—ã/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã  
üí° –î–∞—é —Å–∏–≥–Ω–∞–ª—ã –∫–æ–≥–¥–∞ –ø–æ—Ä–∞ –¥–æ–±–∏—Ä–∞—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å  
üìà –°—á–∏—Ç–∞—é P&L –ø–æ –≤—Å–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é  
‚ö° –ü—Ä–∏—Å—ã–ª–∞—é –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è  

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:</b> BTC, ETH, SOL, ADA, DOT, MATIC, LINK, UNI, AVAX, ATOM, XRP, DOGE, LTC, BCH

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ <b>–î–æ–±–∞–≤–∏–º –≤–∞—à—É –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é?</b>  

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:
<code>BTC long 45000</code>
<code>ETH short 3200, –¥–µ–ø–æ–∑–∏—Ç 1000</code>
<code>SOL long 180, —Ä–∞–∑–º–µ—Ä 5</code>

ü§ñ –Ø —Å–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏! üöÄ
    `;
    bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'HTML' });
  });

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)
  bot.on('message', async (msg) => {
    if (!msg.text || msg.text.startsWith('/')) return;

    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!users.has(userId)) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }

    const user = users.get(userId);

    // –õ–∏–º–∏—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    if (!user.isPremium && user.positionCount >= 3) {
      bot.sendMessage(chatId, `
‚ùå <b>–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω</b>

–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: –¥–æ 3 –ø–æ–∑–∏—Ü–∏–π
Premium: –±–µ–∑–ª–∏–º–∏—Ç + –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

–û—Ñ–æ—Ä–º–∏—Ç—å: /subscribe
      `, { parse_mode: 'HTML' });
      return;
    }

    // –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
    const parsed = parsePositionInput(msg.text);
    if (!parsed.symbol || !parsed.direction || !parsed.entryPrice) {
      bot.sendMessage(chatId, `
‚ùå <b>–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø–æ–∑–∏—Ü–∏–∏</b>

–ü—Ä–∏–º–µ—Ä—ã:
<code>BTC long 45000</code>
<code>ETH short 3200, –¥–µ–ø–æ–∑–∏—Ç 1000</code>
<code>SOL long 180, —Ä–∞–∑–º–µ—Ä 5</code>
      `, { parse_mode: 'HTML' });
      return;
    }

    // –°–æ–æ–±—â–µ–Ω–∏–µ "–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
    const analysisMsg = await bot.sendMessage(chatId, 'ü§ñ <b>AI Crypto Tracker –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...</b>\n\n‚è≥ –ü–æ–ª—É—á–∞—é —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...', { parse_mode: 'HTML' });

    // –†—ã–Ω–æ–∫
    const marketData = await getMarketData(parsed.symbol);
    if (!marketData) {
      await bot.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä.\n–ï—Å–ª–∏ —ç—Ç–æ Render, –¥–æ–±–∞–≤—å—Ç–µ COINGECKO_API_KEY –≤ env.',
        { chat_id: chatId, message_id: analysisMsg.message_id }
      );
      return;
    }

    await bot.editMessageText('ü§ñ <b>AI Crypto Tracker –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...</b>\n\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã...', {
      chat_id: chatId, message_id: analysisMsg.message_id, parse_mode: 'HTML'
    });

    const optimal = calculateOptimalLevels(parsed.entryPrice, parsed.direction, marketData);
    if (!optimal) {
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —É—Ä–æ–≤–Ω–µ–π', { chat_id: chatId, message_id: analysisMsg.message_id });
      return;
    }

    let positionSize = null;
    if (parsed.deposit) {
      positionSize = calculatePositionSize(parsed.deposit, parsed.entryPrice, optimal.stopLoss);
    } else if (parsed.size) {
      positionSize = {
        quantity: parsed.size,
        positionValue: round(parsed.size * parsed.entryPrice, 2),
        riskAmount: round(parsed.size * Math.abs(parsed.entryPrice - optimal.stopLoss) / parsed.entryPrice * parsed.entryPrice * 0.04, 2) // –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
      };
    }

    const currentPrice = marketData.price;
    const diffPct = ((currentPrice - parsed.entryPrice) / parsed.entryPrice) * 100;
    const volumeStatus = marketData.avgVolume > 0 && marketData.volume24h > marketData.avgVolume * 1.2 ? '–≤—ã—Å–æ–∫–∏–π' : '—Å—Ä–µ–¥–Ω–∏–π';
    const volatilityLevel = marketData.volatility > 50 ? '–≤—ã—Å–æ–∫–∞—è' : marketData.volatility > 30 ? '—Å—Ä–µ–¥–Ω—è—è' : '–Ω–∏–∑–∫–∞—è';

    let analysisText = `
üìä <b>${parsed.symbol}USDT ‚Äî ${parsed.direction.toUpperCase()} –ø–æ–∑–∏—Ü–∏—è</b>
üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> $${parsed.entryPrice}
${parsed.deposit ? `üíµ <b>–î–µ–ø–æ–∑–∏—Ç:</b> $${parsed.deposit}` : parsed.size ? `üì¶ <b>–†–∞–∑–º–µ—Ä:</b> ${parsed.size} ${parsed.symbol}` : ''}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<b>–î–∞–Ω–Ω—ã–µ: ${marketData.provider}</b>

üìà <b>–†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ${parsed.symbol}:</b>
‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${round(currentPrice, 2)} (${diffPct >= 0 ? '+' : ''}${round(diffPct, 2)}%)  
‚Ä¢ 24—á –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${round(marketData.change24h, 2)}%  
‚Ä¢ 24—á –æ–±—ä—ë–º: ${volumeStatus}  
‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≥–æ–¥): ${round(marketData.volatility, 1)}% (${volatilityLevel})  
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: $${round(marketData.support, 2)}  
‚Ä¢ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: $${round(marketData.resistance, 2)}  

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
üõë –°—Ç–æ–ø-–ª–æ—Å—Å: $${optimal.stopLoss} (-${round(optimal.riskPercent, 1)}%)  
üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: $${optimal.takeProfit} (+${round(((optimal.takeProfit - parsed.entryPrice) / parsed.entryPrice) * 100, 1)}%)
<i>–£—Ä–æ–≤–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏; —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å ‚âà 1:2</i>
    `;

    if (positionSize) {
      analysisText += `
<b>üì¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä:</b> ${positionSize.quantity} ${parsed.symbol} (~$${positionSize.positionValue})
<i>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: ~$${positionSize.riskAmount}</i>
      `;
    }

    analysisText += `
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<b>‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?</b>
    `;

    // –ó–∞–º–µ–Ω—è–µ–º "–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é" –Ω–∞ –∏—Ç–æ–≥–æ–≤–æ–µ + –∫–Ω–æ–ø–∫–∏
    await bot.editMessageText(analysisText, {
      chat_id: chatId,
      message_id: analysisMsg.message_id,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å', callback_data: `add_position_${userId}_${Date.now()}` },
            { text: '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: `modify_position_${userId}_${Date.now()}` }
          ],
          [{ text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `details_position_${userId}_${Date.now()}` }]
        ]
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è callback
    awaitingInput.set(userId, {
      symbol: parsed.symbol,
      direction: parsed.direction,
      entryPrice: parsed.entryPrice,
      deposit: parsed.deposit,
      size: parsed.size,
      marketData,
      optimalLevels: optimal,
      positionSize
    });
  });

  // Callback –∫–Ω–æ–ø–∫–∏
  bot.on('callback_query', async (cbq) => {
    const chatId = cbq.message.chat.id;
    const userId = cbq.from.id;
    const data = cbq.data || '';

    if (data.startsWith('add_position_')) {
      const temp = awaitingInput.get(userId);
      if (!temp) {
        bot.answerCallbackQuery(cbq.id, { text: '–î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é' });
        return;
      }

      const posId = `${userId}_${Date.now()}`;
      const qty = temp.positionSize ? temp.positionSize.quantity : (temp.size || 1);

      const position = {
        id: posId,
        userId,
        symbol: temp.symbol,
        direction: temp.direction,
        entryPrice: temp.entryPrice,
        stopLoss: temp.optimalLevels.stopLoss,
        takeProfit: temp.optimalLevels.takeProfit,
        quantity: qty,
        deposit: temp.deposit || 0,
        createdAt: new Date(),
        isActive: true
      };

      positions.set(posId, position);
      const user = users.get(userId);
      user.positionCount = (user.positionCount || 0) + 1;
      awaitingInput.delete(userId);

      // –¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞
      const md = await getMarketData(temp.symbol);
      const priceNow = md ? md.price : temp.entryPrice;
      const pnl = calculatePnL(position, priceNow);
      const pnlPct = (pnl / Math.max(1e-9, position.entryPrice * position.quantity)) * 100;

      // –°–∏–≥–Ω–∞–ª—ã
      const signals = md ? generateMarketSignals(position, md) : [];
      const signalsText = signals.length
        ? signals.map(s => `‚Ä¢ ${s.message}`).join('\n')
        : '‚Ä¢ üü° –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è ‚Äî —è–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç';

      const responseText = `
‚úÖ <b>–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!</b>

üìä <b>${temp.symbol}USDT ${temp.direction.toUpperCase()} #${user.positionCount}</b>
üí∞ –í—Ö–æ–¥: $${temp.entryPrice} | –†–∞–∑–º–µ—Ä: ${qty} ${temp.symbol}
üõë SL: $${position.stopLoss} | üéØ TP: $${position.takeProfit}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîî <b>–Ø –Ω–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>

üìà <b>–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞:</b>
–¶–µ–Ω–∞: $${round(priceNow, 2)} (${pnl >= 0 ? '+' : ''}${round(pnlPct, 2)}%)
P&L: ${pnl >= 0 ? '+' : ''}$${round(pnl, 2)}

<b>–†—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:</b>
${signalsText}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
‚Ä¢ /positions ‚Äî –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ /signals ‚Äî —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ /balance ‚Äî P&L –ø–æ—Ä—Ç—Ñ–µ–ª—è
      `;
      bot.editMessageText(responseText, {
        chat_id: chatId,
        message_id: cbq.message.message_id,
        parse_mode: 'HTML'
      });
      bot.answerCallbackQuery(cbq.id, { text: '–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!' });
    } else if (data.startsWith('modify_position_')) {
      bot.answerCallbackQuery(cbq.id, { text: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –∞–ø–¥–µ–π—Ç–µ' });
    } else if (data.startsWith('details_position_')) {
      const temp = awaitingInput.get(userId);
      if (!temp) {
        bot.answerCallbackQuery(cbq.id, { text: '–î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏' });
        return;
      }
      const md = temp.marketData;
      const detailsText = `
üìä <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ${temp.symbol}</b>

<b>–ü–æ—á–µ–º—É —ç—Ç–∏ —É—Ä–æ–≤–Ω–∏:</b>
‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å $${temp.optimalLevels.stopLoss} –Ω–∏–∂–µ/–≤—ã—à–µ –∫–ª—é—á–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è ($${round(md.support, 2)} / $${round(md.resistance, 2)}) —Å —É—á—ë—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (${round(md.volatility, 1)}%)
‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç $${temp.optimalLevels.takeProfit} —É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è/–ø–æ–¥–¥–µ—Ä–∂–∫–∏, R:R ‚âà 1:2

<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä—ã–Ω–∫–∞ (7–¥):</b>
‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: $${round(md.low7d, 2)} ‚Äî $${round(md.high7d, 2)}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: $${round(md.avgVolume, 0)}
‚Ä¢ –û–±—ä—ë–º 24—á: $${round(md.volume24h, 0)} (${md.avgVolume ? round(md.volume24h / md.avgVolume * 100, 0) : 0}% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)
      `;
      bot.sendMessage(chatId, detailsText, { parse_mode: 'HTML' });
      bot.answerCallbackQuery(cbq.id, { text: '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
    }
  });

  // /positions ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
  bot.onText(/\/positions/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const list = Array.from(positions.values()).filter(p => p.userId === userId && p.isActive);
    if (!list.length) {
      bot.sendMessage(chatId, `
üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>

–î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏—é:
<code>BTC long 45000</code>
<code>ETH short 3200, –¥–µ–ø–æ–∑–∏—Ç 1000</code>
      `, { parse_mode: 'HTML' });
      return;
    }

    let text = 'üìä <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n';
    for (const [i, p] of list.entries()) {
      const md = await getMarketData(p.symbol);
      const cur = md ? round(md.price, 2) : 'N/A';
      let pnl = 0, pnlPct = 0;
      if (md) {
        pnl = calculatePnL(p, md.price);
        pnlPct = (pnl / Math.max(1e-9, p.entryPrice * p.quantity)) * 100;
      }
      const emoji = pnl >= 0 ? 'üü¢' : 'üî¥';
      text += `${emoji} <b>${p.symbol} ${p.direction.toUpperCase()} #${i + 1}</b>\n`;
      text += `–í—Ö–æ–¥: $${p.entryPrice} | –¢–µ–∫—É—â–∞—è: $${cur}\n`;
      text += `P&L: ${pnl >= 0 ? '+' : ''}${round(pnl, 2)} (${pnlPct >= 0 ? '+' : ''}${round(pnlPct, 2)}%)\n`;
      text += `SL: $${p.stopLoss} | TP: $${p.takeProfit}\n\n`;
    }
    bot.sendMessage(chatId, text, { parse_mode: 'HTML' });
  });

  // /signals ‚Äî —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
  bot.onText(/\/signals/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const list = Array.from(positions.values()).filter(p => p.userId === userId && p.isActive);
    if (!list.length) {
      bot.sendMessage(chatId, `
üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</b>

–î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏—é:
<code>BTC long 45000</code>
      `, { parse_mode: 'HTML' });
      return;
    }

    let message = 'üéØ <b>–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –≤–∞—à–∏–º –ø–æ–∑–∏—Ü–∏—è–º:</b>\n\n';
    let hasSignals = false;

    for (const [i, p] of list.entries()) {
      const md = await getMarketData(p.symbol);
      if (!md) continue;
      const sigs = generateMarketSignals(p, md);
      if (sigs.length) {
        hasSignals = true;
        message += `üìä <b>${p.symbol} #${i + 1}</b> ($${round(md.price, 2)}):\n`;
        sigs.forEach(s => message += `${s.message}\n`);
        message += '\n';
      }
    }

    if (!hasSignals) {
      message += '‚úÖ <b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ</b>\n';
      message += 'üìä –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç, —Ä—ã–Ω–æ–∫ —Å–ø–æ–∫–æ–µ–Ω\n';
      message += 'üí° –Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n';
    }

    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
  });

  // /balance ‚Äî —Å—É–º–º–∞—Ä–Ω—ã–π P&L
  bot.onText(/\/balance/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const list = Array.from(positions.values()).filter(p => p.userId === userId && p.isActive);
    if (!list.length) {
      bot.sendMessage(chatId, 'üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>', { parse_mode: 'HTML' });
      return;
    }

    let totalPnL = 0;
    let totalInvested = 0;

    const waitMsg = await bot.sendMessage(chatId, 'üìä <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Ä—Ç—Ñ–µ–ª—å...</b>', { parse_mode: 'HTML' });

    for (const p of list) {
      const md = await getMarketData(p.symbol);
      if (!md) continue;
      totalInvested += p.entryPrice * p.quantity;
      totalPnL += calculatePnL(p, md.price);
    }

    const pct = totalInvested > 0 ? (totalPnL / totalInvested) * 100 : 0;
    const emoji = totalPnL >= 0 ? 'üü¢' : 'üî¥';
    const trend = totalPnL >= 0 ? 'üìà' : 'üìâ';

    let status = '‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–∏–µ –ø–æ—Ç–µ—Ä–∏';
    if (pct > 5) status = 'üî• –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!';
    else if (pct > 0) status = '‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å –≤ –ø–ª—é—Å–µ';
    else if (pct <= -5) status = 'üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è';

    const summary = `
${emoji} <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è</b>

üí∞ P&L: ${totalPnL >= 0 ? '+' : ''}${round(totalPnL, 2)} ${trend}
üìä –ü—Ä–æ—Ü–µ–Ω—Ç: ${pct >= 0 ? '+' : ''}${round(pct, 2)}%
üíµ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${round(totalInvested, 2)}

${status}

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
${pct > 10 ? '‚Ä¢ üí° –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–º–µ—Å—Ç–Ω–∞\n' : ''}${pct < -10 ? '‚Ä¢ ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SL –ø–æ —É–±—ã—Ç–æ—á–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º\n' : ''}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /signals –¥–ª—è —Å–≤–µ–∂–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
    `;

    bot.editMessageText(summary, {
      chat_id: chatId,
      message_id: waitMsg.message_id,
      parse_mode: 'HTML'
    });
  });

  // /subscribe ‚Äî –∏–Ω—Ñ–æ –ø–æ –ø—Ä–µ–º–∏—É–º—É (–∫–∞–∫ –±—ã–ª–æ)
  bot.onText(/\/subscribe/, (msg) => {
    const chatId = msg.chat.id;
    const message = `
üíé <b>AI Crypto Tracker Premium</b>

üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</b>:
‚Ä¢ –î–æ 3 –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã

üíé <b>Premium ($15/–º–µ—Å)</b>:
‚Ä¢ ‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ ‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ AI-—Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: –Ω–∞–ø–∏—à–∏—Ç–µ @your_username
    `;
    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
  });

  // /help ‚Äî –ø–æ–º–æ—â—å
  bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const message = `
üìã <b>–ü–æ–º–æ—â—å</b>

–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:
<code>BTC long 45000</code>
<code>ETH short 3200, –¥–µ–ø–æ–∑–∏—Ç 1000</code>

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /positions ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ /signals ‚Äî —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ /balance ‚Äî –æ–±—â–∏–π P&L
‚Ä¢ /close N ‚Äî –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ÑñN
‚Ä¢ /subscribe ‚Äî –ø—Ä–µ–º–∏—É–º
    `;
    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
  });

  // /close N ‚Äî –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
  bot.onText(/\/close (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const n = parseInt(match[1], 10);

    const list = Array.from(positions.values()).filter(p => p.userId === userId && p.isActive);
    if (!list.length || !Number.isFinite(n) || n < 1 || n > list.length) {
      bot.sendMessage(chatId, `‚ùå –ü–æ–∑–∏—Ü–∏—è #${match[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /positions, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä–∞.`);
      return;
    }

    const pos = list[n - 1];
    pos.isActive = false;

    const user = users.get(userId);
    if (user && user.positionCount > 0) user.positionCount--;

    bot.sendMessage(chatId, `‚úÖ –ü–æ–∑–∏—Ü–∏—è ${pos.symbol} ${pos.direction.toUpperCase()} #${n} –∑–∞–∫—Ä—ã—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.`);
  });

  // /admin <pass> stats|broadcast text...
  bot.onText(/\/admin (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const args = (match[1] || '').split(' ');
    const pass = args.shift();
    if (pass !== ADMIN_PASSWORD) {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      return;
    }
    const command = args.shift();

    if (command === 'stats') {
      const totalUsers = users.size;
      const totalPositions = Array.from(positions.values()).filter(p => p.isActive).length;
      const premiumUsers = Array.from(users.values()).filter(u => u.isPremium).length;
      const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
      const dailyActive = Array.from(users.values()).filter(u => u.registeredAt > dayAgo).length;

      const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI Crypto Tracker</b>

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}
üíé Premium: ${premiumUsers}
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${totalPositions}
üóì –ù–æ–≤—ã—Ö –∑–∞ 24—á: ${dailyActive}
Conv: ${totalUsers ? round((premiumUsers / totalUsers) * 100, 1) : 0}%
      `;
      bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } else if (command === 'broadcast' && args.length) {
      const text = args.join(' ');
      bot.sendMessage(chatId, 'üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
      (async () => {
        let sent = 0;
        for (const u of users.values()) {
          try {
            await bot.sendMessage(u.id, `üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n${text}`, { parse_mode: 'HTML' });
            sent++;
            await new Promise(r => setTimeout(r, 100));
          } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${u.id}:`, e?.response?.status || e?.message);
          }
        }
        bot.sendMessage(chatId, `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
      })();
    } else {
      bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø–Ω—ã–µ admin-–∫–æ–º–∞–Ω–¥—ã: stats | broadcast <text>');
    }
  });

  // –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç) ‚Äî –∫–∞–∫ –≤ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏
  setInterval(async () => {
    console.log('‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    for (const position of positions.values()) {
      if (!position.isActive) continue;

      try {
        const md = await getMarketData(position.symbol);
        if (!md) continue;

        const signals = generateMarketSignals(position, md)
          .filter(s => s.type === 'warning' || s.type === 'profit');

        if (signals.length) {
          const price = md.price;
          const pnl = calculatePnL(position, price);
          const pnlPct = (pnl / Math.max(1e-9, position.entryPrice * position.quantity)) * 100;

          const message = `
üö® <b>–í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ${position.symbol}!</b>

üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${round(price, 2)}
üìà P&L: ${pnl >= 0 ? '+' : ''}${round(pnl, 2)} (${pnlPct >= 0 ? '+' : ''}${round(pnlPct, 2)}%)

<b>–°–∏–≥–Ω–∞–ª—ã:</b>
${signals.map(s => `‚Ä¢ ${s.message}`).join('\n')}

–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏: /positions
          `;
          await bot.sendMessage(position.userId, message, { parse_mode: 'HTML' });
          await new Promise(r => setTimeout(r, 500)); // –ª—ë–≥–∫–∞—è –ø–∞—É–∑–∞
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', e?.response?.status || e?.message);
      }
    }
  }, 30 * 60 * 1000);

  // –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
  bot.on('error', (error) => console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error?.response?.status || error?.message));
  bot.on('polling_error', (error) => console.error('–û—à–∏–±–∫–∞ polling:', error?.response?.status || error?.message));
}

// ---------------- EXPRESS (Render) ----------------
const app = express();
app.get('/', (_req, res) => {
  res.send(`
    <h1>ü§ñ AI Crypto Tracker Bot</h1>
    <p>Status: ‚úÖ Online</p>
    <p>Users: ${users.size}</p>
    <p>Active Positions: ${Array.from(positions.values()).filter(p => p.isActive).length}</p>
  `);
});
app.get('/health', (_req, res) => {
  res.json({
    status: 'OK',
    uptime: process.uptime(),
    users: users.size,
    positions: Array.from(positions.values()).filter(p => p.isActive).length,
    region_hint: process.env.RENDER_REGION || 'unknown'
  });
});
app.listen(PORT, () => {
  console.log(`üöÄ AI Crypto Tracker Bot –∑–∞–ø—É—â–µ–Ω!`);
  console.log(`üåê Server running on port ${PORT}`);
  console.log(`üí° –í Telegram /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é: "BTC long 45000"`);
  console.log(`üîß –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ fallback –¥–æ–±–∞–≤—å—Ç–µ COINGECKO_API_KEY –≤ Render env`);
});
console.log('ü§ñ AI Crypto Tracker Bot v3.2 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
