const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
const BOT_TOKEN = process.env.BOT_TOKEN || 'YOUR_BOT_TOKEN_HERE';
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const users = new Map();
const positions = new Map();
const awaitingInput = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞

// –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–∞—Ä–æ–ª—å
const ADMIN_PASSWORD = 'crypto123';

// –ú–∞–ø–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Binance API
const symbolMapping = {
    'BTC': 'BTCUSDT',
    'ETH': 'ETHUSDT', 
    'SOL': 'SOLUSDT',
    'ADA': 'ADAUSDT',
    'DOT': 'DOTUSDT',
    'MATIC': 'MATICUSDT',
    'LINK': 'LINKUSDT',
    'UNI': 'UNIUSDT',
    'AVAX': 'AVAXUSDT',
    'ATOM': 'ATOMUSDT',
    'XRP': 'XRPUSDT',
    'DOGE': 'DOGEUSDT',
    'LTC': 'LTCUSDT',
    'BCH': 'BCHUSDT'
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Binance API
async function getMarketData(symbol) {
    try {
        const binanceSymbol = symbolMapping[symbol.toUpperCase()];
        if (!binanceSymbol) {
            console.log(`–°–∏–º–≤–æ–ª ${symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
            return null;
        }

        console.log(`–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol} (${binanceSymbol})...`);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 24—á
        const ticker24h = await axios.get(`https://api.binance.com/api/v3/ticker/24hr?symbol=${binanceSymbol}`, {
            timeout: 10000
        });

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π (—Å–≤–µ—á–∏ –ø–æ 1 –¥–Ω—é)
        const klines = await axios.get(`https://api.binance.com/api/v3/klines?symbol=${binanceSymbol}&interval=1d&limit=7`, {
            timeout: 10000
        });

        if (!ticker24h.data || !klines.data) {
            console.log(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}`);
            return null;
        }

        const ticker = ticker24h.data;
        const candles = klines.data;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const currentPrice = parseFloat(ticker.lastPrice);
        const change24h = parseFloat(ticker.priceChangePercent);
        const volume24h = parseFloat(ticker.volume) * currentPrice;

        // –†–∞—Å—á–µ—Ç high/low –∑–∞ 7 –¥–Ω–µ–π
        const prices = candles.map(c => [parseFloat(c[2]), parseFloat(c[3])]).flat(); // high –∏ low –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏
        const high7d = Math.max(...prices);
        const low7d = Math.min(...prices);

        // –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ 7 –¥–Ω–µ–π
        const volumes = candles.map(c => parseFloat(c[5]) * parseFloat(c[4])); // volume * close price
        const avgVolume = volumes.reduce((a, b) => a + b, 0) / volumes.length;

        // –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è)
        const closePrices = candles.map(c => parseFloat(c[4]));
        const returns = [];
        for (let i = 1; i < closePrices.length; i++) {
            returns.push((closePrices[i] - closePrices[i-1]) / closePrices[i-1]);
        }
        const volatility = Math.sqrt(returns.reduce((a, b) => a + b*b, 0) / returns.length) * Math.sqrt(365) * 100;

        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è ${symbol}: ${currentPrice}`);

        return {
            price: currentPrice,
            change24h: change24h,
            volume24h: volume24h,
            high7d: high7d,
            low7d: low7d,
            volatility: volatility,
            avgVolume: avgVolume,
            support: low7d * 1.02, // 2% –≤—ã—à–µ –º–∏–Ω–∏–º—É–º–∞ –Ω–µ–¥–µ–ª–∏
            resistance: high7d * 0.98 // 2% –Ω–∏–∂–µ –º–∞–∫—Å–∏–º—É–º–∞ –Ω–µ–¥–µ–ª–∏
        };
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}:`, error.message);
        return null;
    }
}

// –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
function calculateOptimalLevels(entryPrice, direction, marketData, riskPercent = 4) {
    if (!marketData) return null;

    const { volatility, support, resistance } = marketData;
    
    let stopLoss, takeProfit;
    
    if (direction === 'long') {
        // –î–ª—è –ª–æ–Ω–≥–∞ —Å—Ç–æ–ø –Ω–∏–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        const volatilityBuffer = entryPrice * (volatility / 100) * 0.5;
        stopLoss = Math.min(support - volatilityBuffer, entryPrice * (1 - riskPercent / 100));
        
        // –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é –∏–ª–∏ 2:1 —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        const riskRewardRatio = 2;
        const riskAmount = entryPrice - stopLoss;
        takeProfit = Math.max(resistance, entryPrice + (riskAmount * riskRewardRatio));
        
    } else { // short
        // –î–ª—è —à–æ—Ä—Ç–∞ —Å—Ç–æ–ø –≤—ã—à–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        const volatilityBuffer = entryPrice * (volatility / 100) * 0.5;
        stopLoss = Math.max(resistance + volatilityBuffer, entryPrice * (1 + riskPercent / 100));
        
        const riskRewardRatio = 2;
        const riskAmount = stopLoss - entryPrice;
        takeProfit = Math.min(support, entryPrice - (riskAmount * riskRewardRatio));
    }

    return {
        stopLoss: Math.round(stopLoss * 100) / 100,
        takeProfit: Math.round(takeProfit * 100) / 100,
        riskPercent: Math.abs((stopLoss - entryPrice) / entryPrice * 100)
    };
}

// –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
function calculatePositionSize(deposit, entryPrice, stopLoss, riskPercent = 4) {
    const riskAmount = deposit * (riskPercent / 100);
    const priceRisk = Math.abs(entryPrice - stopLoss);
    const positionValue = riskAmount / (priceRisk / entryPrice);
    const quantity = positionValue / entryPrice;
    
    return {
        quantity: Math.round(quantity * 100000) / 100000,
        positionValue: Math.round(positionValue * 100) / 100,
        riskAmount: Math.round(riskAmount * 100) / 100
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
function generateMarketSignals(position, marketData) {
    const signals = [];
    const { price, change24h, volume24h, avgVolume } = marketData;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –∫–ª—é—á–µ–≤—ã–º —É—Ä–æ–≤–Ω—è–º
    const entryPrice = position.entryPrice;
    const stopDistance = Math.abs(price - position.stopLoss) / position.stopLoss * 100;
    const takeProfitDistance = Math.abs(price - position.takeProfit) / position.takeProfit * 100;
    
    if (stopDistance < 2) {
        signals.push({
            type: 'warning',
            message: 'üî¥ –í–ù–ò–ú–ê–ù–ò–ï! –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ —Å—Ç–æ–ø-–ª–æ—Å—Å—É'
        });
    }
    
    if (takeProfitDistance < 3) {
        signals.push({
            type: 'profit',
            message: 'üéØ –ë–ª–∏–∑–∫–æ –∫ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —á–∞—Å—Ç–∏—á–Ω—É—é —Ñ–∏–∫—Å–∞—Ü–∏—é'
        });
    }
    
    // –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
    if (volume24h > avgVolume * 1.5) {
        signals.push({
            type: 'volume',
            message: 'üìà –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ –æ–±—ä–µ–º—ã - –≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ'
        });
    }
    
    // –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ 24—á
    if (Math.abs(change24h) > 8) {
        const direction = change24h > 0 ? '—Ä–æ—Å—Ç' : '–ø–∞–¥–µ–Ω–∏–µ';
        signals.push({
            type: 'volatility',
            message: `‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${direction} ${Math.abs(change24h).toFixed(1)}%`
        });
    }
    
    return signals;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
function parsePositionInput(text) {
    const normalizedText = text.toLowerCase().replace(/[,.$]/g, ' ');
    
    // –ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–∞
    const symbolMatch = normalizedText.match(/\b(btc|eth|sol|ada|dot|matic|link|uni|avax|atom|xrp|doge|ltc|bch)\b/);
    
    // –ü–æ–∏—Å–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const directionMatch = normalizedText.match(/\b(long|short|–ª–æ–Ω–≥|—à–æ—Ä—Ç)\b/);
    
    // –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
    const priceMatch = normalizedText.match(/\b(\d+(?:\.\d+)?)\b/);
    
    // –ü–æ–∏—Å–∫ –¥–µ–ø–æ–∑–∏—Ç–∞
    const depositMatch = normalizedText.match(/(?:–¥–µ–ø–æ–∑–∏—Ç|deposit|–¥–µ–ø)\s*(\d+(?:\.\d+)?)/);
    
    // –ü–æ–∏—Å–∫ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
    const sizeMatch = normalizedText.match(/(?:—Ä–∞–∑–º–µ—Ä|size|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)\s*(\d+(?:\.\d+)?)/);
    
    return {
        symbol: symbolMatch ? symbolMatch[1].toUpperCase() : null,
        direction: directionMatch ? (directionMatch[1] === 'long' || directionMatch[1] === '–ª–æ–Ω–≥' ? 'long' : 'short') : null,
        entryPrice: priceMatch ? parseFloat(priceMatch[1]) : null,
        deposit: depositMatch ? parseFloat(depositMatch[1]) : null,
        size: sizeMatch ? parseFloat(sizeMatch[1]) : null
    };
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    if (!users.has(userId)) {
        users.set(userId, {
            id: userId,
            username: msg.from.username,
            isPremium: false,
            registeredAt: new Date(),
            positionCount: 0
        });
    }

    const welcomeMessage = `
üöÄ <b>–ü—Ä–∏–≤–µ—Ç! –Ø AI Crypto Tracker</b>

–Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –∫—Ä–∏–ø—Ç–æ–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ç–æ–ø-–ª–æ—Å—Å—ã/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
‚Ä¢ üí° –î–∞—é —Å–∏–≥–Ω–∞–ª—ã –∫–æ–≥–¥–∞ –ø–æ—Ä–∞ –¥–æ–±–∏—Ä–∞—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å
‚Ä¢ üìà –°—á–∏—Ç–∞—é P&L –ø–æ –≤—Å–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é
‚Ä¢ ‚ö° –ü—Ä–∏—Å—ã–ª–∞—é –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:</b> BTC, ETH, SOL, ADA, DOT, MATIC, LINK, UNI, AVAX, ATOM

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ <b>–î–æ–±–∞–≤–∏–º –≤–∞—à—É –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é?</b>

–ú–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ:
‚Ä¢ <b>–ö–∞–∫–æ–π –∞–∫—Ç–∏–≤?</b> (BTC, ETH, SOL...)
‚Ä¢ <b>Long –∏–ª–∏ Short?</b>
‚Ä¢ <b>–ü–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ –∑–∞—à–ª–∏?</b>
‚Ä¢ <b>–†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞?</b> (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

<b>–ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:</b>
<code>BTC long 45000</code>
<code>ETH short 3200, –¥–µ–ø–æ–∑–∏—Ç 1000</code>

ü§ñ <b>–Ø —Å–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏!</b>

–ì–æ—Ç–æ–≤—ã? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –≤–∞—à—É –ø–æ–∑–∏—Ü–∏—é! üöÄ
    `;
    
    bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π)
bot.on('message', async (msg) => {
    if (msg.text && !msg.text.startsWith('/')) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (!users.has(userId)) {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
            return;
        }
        
        const user = users.get(userId);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (!user.isPremium && user.positionCount >= 3) {
            bot.sendMessage(chatId, `
‚ùå <b>–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω!</b>

–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: –¥–æ 3 –ø–æ–∑–∏—Ü–∏–π
Premium: –±–µ–∑–ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π + –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: /subscribe
            `, { parse_mode: 'HTML' });
            return;
        }
        
        // –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const parsed = parsePositionInput(msg.text);
        
        if (!parsed.symbol || !parsed.direction || !parsed.entryPrice) {
            bot.sendMessage(chatId, `
‚ùå <b>–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø–æ–∑–∏—Ü–∏–∏</b>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–∫:
<code>BTC long 45000</code>
<code>ETH short 3200, –¥–µ–ø–æ–∑–∏—Ç 1000</code>
<code>SOL long 180, —Ä–∞–∑–º–µ—Ä 5</code>

–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å: –∞–∫—Ç–∏–≤, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (long/short), —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            `, { parse_mode: 'HTML' });
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        const analysisMsg = await bot.sendMessage(chatId, 'ü§ñ <b>AI Crypto Tracker –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...</b>\n\n‚è≥ –ü–æ–ª—É—á–∞—é —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...', { parse_mode: 'HTML' });
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const marketData = await getMarketData(parsed.symbol);
        
        if (!marketData) {
            await bot.editMessageText(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ${parsed.symbol}.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`, {
                chat_id: chatId,
                message_id: analysisMsg.message_id
            });
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º
        await bot.editMessageText('ü§ñ <b>AI Crypto Tracker –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...</b>\n\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã...', {
            chat_id: chatId,
            message_id: analysisMsg.message_id,
            parse_mode: 'HTML'
        });
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
        const optimalLevels = calculateOptimalLevels(parsed.entryPrice, parsed.direction, marketData);
        
        if (!optimalLevels) {
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π', {
                chat_id: chatId,
                message_id: analysisMsg.message_id
            });
            return;
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–µ–ø–æ–∑–∏—Ç
        let positionSize = null;
        if (parsed.deposit) {
            positionSize = calculatePositionSize(parsed.deposit, parsed.entryPrice, optimalLevels.stopLoss);
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const currentPrice = marketData.price;
        const priceChange = ((currentPrice - parsed.entryPrice) / parsed.entryPrice * 100).toFixed(2);
        const priceChangeText = parseFloat(priceChange) >= 0 ? `+${priceChange}%` : `${priceChange}%`;
        const priceEmoji = parseFloat(priceChange) >= 0 ? 'üìà' : 'üìâ';
        
        const volumeStatus = marketData.volume24h > marketData.avgVolume * 1.2 ? '–≤—ã—Å–æ–∫–∏–π' : '—Å—Ä–µ–¥–Ω–∏–π';
        const volatilityLevel = marketData.volatility > 50 ? '–≤—ã—Å–æ–∫–∞—è' : marketData.volatility > 30 ? '—Å—Ä–µ–¥–Ω—è—è' : '–Ω–∏–∑–∫–∞—è';
        
        let analysisText = `
üìä <b>${parsed.symbol}USDT - ${parsed.direction.toUpperCase()} –ø–æ–∑–∏—Ü–∏—è</b>
üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> $${parsed.entryPrice}
${parsed.deposit ? `üíµ <b>–î–µ–ø–æ–∑–∏—Ç:</b> $${parsed.deposit}` : ''}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìà <b>–†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ${parsed.symbol}:</b>
‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${currentPrice} (${priceChangeText} –æ—Ç –≤—Ö–æ–¥–∞) ${priceEmoji}
‚Ä¢ 24—á –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${marketData.change24h.toFixed(2)}%
‚Ä¢ 24—á –æ–±—ä–µ–º: ${volumeStatus}
‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${volatilityLevel} (${marketData.volatility.toFixed(1)}%)
‚Ä¢ –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: $${marketData.support.toFixed(2)}
‚Ä¢ –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: $${marketData.resistance.toFixed(2)}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ <b>–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏:</b>

<b>üõë –°—Ç–æ–ø-–ª–æ—Å—Å:</b> $${optimalLevels.stopLoss} (-${optimalLevels.riskPercent.toFixed(1)}%)
<i>–£—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω —Å —É—á–µ—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏</i>

<b>üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</b> $${optimalLevels.takeProfit} (+${(((optimalLevels.takeProfit - parsed.entryPrice) / parsed.entryPrice) * 100).toFixed(1)}%)
<i>–ó–æ–Ω–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å 2:1</i>
        `;
        
        if (positionSize) {
            analysisText += `
<b>üì¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä:</b> ${positionSize.quantity} ${parsed.symbol} (~$${positionSize.positionValue})
<i>–†–∏—Å–∫: $${positionSize.riskAmount} (${((positionSize.riskAmount / parsed.deposit) * 100).toFixed(1)}% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞)</i>
            `;
        }

        analysisText += `
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?</b>
        `;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.deleteMessage(chatId, analysisMsg.message_id);
        
        bot.sendMessage(chatId, analysisText, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å', callback_data: `add_position_${userId}_${Date.now()}` },
                        { text: '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: `modify_position_${userId}_${Date.now()}` }
                    ],
                    [
                        { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `details_position_${userId}_${Date.now()}` }
                    ]
                ]
            }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        awaitingInput.set(userId, {
            symbol: parsed.symbol,
            direction: parsed.direction,
            entryPrice: parsed.entryPrice,
            deposit: parsed.deposit,
            size: parsed.size,
            marketData: marketData,
            optimalLevels: optimalLevels,
            positionSize: positionSize
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    
    if (data.startsWith('add_position_')) {
        const tempPosition = awaitingInput.get(userId);
        if (!tempPosition) {
            bot.answerCallbackQuery(callbackQuery.id, { text: '–î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é' });
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        const positionId = `${userId}_${Date.now()}`;
        const position = {
            id: positionId,
            userId: userId,
            symbol: tempPosition.symbol,
            direction: tempPosition.direction,
            entryPrice: tempPosition.entryPrice,
            stopLoss: tempPosition.optimalLevels.stopLoss,
            takeProfit: tempPosition.optimalLevels.takeProfit,
            quantity: tempPosition.positionSize ? tempPosition.positionSize.quantity : 1,
            deposit: tempPosition.deposit || 0,
            createdAt: new Date(),
            isActive: true
        };
        
        positions.set(positionId, position);
        const user = users.get(userId);
        user.positionCount++;
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        awaitingInput.delete(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        const currentMarketData = await getMarketData(tempPosition.symbol);
        const currentPrice = currentMarketData ? currentMarketData.price : tempPosition.entryPrice;
        
        let pnl = 0;
        if (tempPosition.direction === 'long') {
            pnl = (currentPrice - tempPosition.entryPrice) * position.quantity;
        } else {
            pnl = (tempPosition.entryPrice - currentPrice) * position.quantity;
        }
        
        const pnlPercent = ((pnl / (position.quantity * tempPosition.entryPrice)) * 100);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        const signals = currentMarketData ? generateMarketSignals(position, currentMarketData) : [];
        
        let signalsText = '';
        if (signals.length > 0) {
            signalsText = '\n<b>–†—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:</b>\n';
            signals.forEach(signal => {
                signalsText += `‚Ä¢ ${signal.message}\n`;
            });
        } else {
            signalsText = '\n‚Ä¢ üü° <b>–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è</b> - —Ü–µ–Ω–∞ –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ\n‚Ä¢ üìä <b>–û–±—ä–µ–º—ã —Å—Ä–µ–¥–Ω–∏–µ</b> - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π\n‚Ä¢ ‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ</b> - —Å–ª–µ–¥–∏–º –∑–∞ –ø—Ä–æ–±–æ–µ–º –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π';
        }
        
        const responseText = `
‚úÖ <b>–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!</b>

üìä <b>${tempPosition.symbol}USDT ${tempPosition.direction.toUpperCase()} #${user.positionCount}</b>
üí∞ –í—Ö–æ–¥: $${tempPosition.entryPrice} | –†–∞–∑–º–µ—Ä: ${position.quantity} ${tempPosition.symbol}
üõë –°—Ç–æ–ø: $${position.stopLoss} | üéØ –¢–µ–π–∫: $${position.takeProfit}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üîî <b>–Ø –Ω–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!</b>
–ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö:
‚Ä¢ –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ —Å—Ç–æ–ø-–ª–æ—Å—Å—É/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–æ–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ
‚Ä¢ –í–∞–∂–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìà <b>–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –ø–æ ${tempPosition.symbol}:</b>

<b>–¶–µ–Ω–∞ —Å–µ–π—á–∞—Å:</b> $${currentPrice} (${pnlPercent >= 0 ? '+' : ''}${pnlPercent.toFixed(2)}% –æ—Ç –≤—Ö–æ–¥–∞)
<b>P&L:</b> ${pnl >= 0 ? '+' : ''}$${pnl.toFixed(2)} ${pnl >= 0 ? 'üìà' : 'üìâ'}

<b>–†—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:</b>${signalsText}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° <b>–ü–æ–∫–∞ –¥–µ—Ä–∂–∏–º –ø–æ–∑–∏—Ü–∏—é, –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
‚Ä¢ /positions - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ /signals - –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ /balance - –æ–±—â–∏–π P&L –ø–æ—Ä—Ç—Ñ–µ–ª—è

<b>–ü—Ä–∏—è—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏! üöÄ</b>
        `;
        
        bot.editMessageText(responseText, {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id,
            parse_mode: 'HTML'
        });
        
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!' });
        
    } else if (data.startsWith('modify_position_')) {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
        
    } else if (data.startsWith('details_position_')) {
        const tempPosition = awaitingInput.get(userId);
        if (!tempPosition) {
            bot.answerCallbackQuery(callbackQuery.id, { text: '–î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏' });
            return;
        }
        
        const detailsText = `
üìä <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è ${tempPosition.symbol}</b>

<b>üéØ –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ —É—Ä–æ–≤–Ω–∏:</b>

<b>–°—Ç–æ–ø-–ª–æ—Å—Å $${tempPosition.optimalLevels.stopLoss}:</b>
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ($${tempPosition.marketData.support.toFixed(2)})
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ (${tempPosition.marketData.volatility.toFixed(1)}%)
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ ${tempPosition.optimalLevels.riskPercent.toFixed(1)}%

<b>–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç $${tempPosition.optimalLevels.takeProfit}:</b>
‚Ä¢ –ó–æ–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è ($${tempPosition.marketData.resistance.toFixed(2)})
‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å 2:1
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–∞–∫—Å–∏–º—É–º—ã –Ω–µ–¥–µ–ª–∏

<b>üìà –†—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:</b>
‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: $${tempPosition.marketData.low7d.toFixed(2)} - $${tempPosition.marketData.high7d.toFixed(2)}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º 7 –¥–Ω–µ–π: ${(tempPosition.marketData.avgVolume / 1000000).toFixed(1)}M
‚Ä¢ –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º vs —Å—Ä–µ–¥–Ω–∏–π: ${((tempPosition.marketData.volume24h / tempPosition.marketData.avgVolume) * 100).toFixed(0)}%

<i>–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –∏ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.</i>
        `;
        
        bot.sendMessage(chatId, detailsText, { parse_mode: 'HTML' });
        bot.answerCallbackQuery(callbackQuery.id, { text: '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /positions - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
bot.onText(/\/positions/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    const userPositions = Array.from(positions.values()).filter(p => p.userId === userId && p.isActive);
    
    if (userPositions.length === 0) {
        bot.sendMessage(chatId, `
üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.</b>

–î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤:
<code>BTC long 45000</code>
<code>ETH short 3200, –¥–µ–ø–æ–∑–∏—Ç 1000</code>
        `, { parse_mode: 'HTML' });
        return;
    }

    let message = 'üìä <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n';
    
    for (const position of userPositions) {
        const marketData = await getMarketData(position.symbol);
        let pnl = 0;
        let pnlPercent = 0;
        let currentPrice = 'N/A';
        
        if (marketData) {
            currentPrice = `$${marketData.price}`;
            if (position.direction === 'long') {
                pnl = (marketData.price - position.entryPrice) * position.quantity;
                pnlPercent = ((marketData.price - position.entryPrice) / position.entryPrice) * 100;
            } else {
                pnl = (position.entryPrice - marketData.price) * position.quantity;
                pnlPercent = ((position.entryPrice - marketData.price) / position.entryPrice) * 100;
            }
        }

        const pnlEmoji = pnl >= 0 ? 'üü¢' : 'üî¥';
        const positionNumber = Array.from(positions.values()).filter(p => p.userId === userId && p.isActive).indexOf(position) + 1;
        
        message += `${pnlEmoji} <b>${position.symbol} ${position.direction.toUpperCase()} #${positionNumber}</b>\n`;
        message += `üí∞ –í—Ö–æ–¥: ${position.entryPrice} | –¢–µ–∫—É—â–∞—è: ${currentPrice}\n`;
        message += `üìà P&L: ${pnl >= 0 ? '+' : ''}${pnl.toFixed(2)} (${pnlPercent >= 0 ? '+' : ''}${pnlPercent.toFixed(2)}%)\n`;
        message += `üõë SL: ${position.stopLoss} | üéØ TP: ${position.takeProfit}\n\n`;
    }
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ /signals - –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
bot.onText(/\/signals/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    const userPositions = Array.from(positions.values()).filter(p => p.userId === userId && p.isActive);
    
    if (userPositions.length === 0) {
        bot.sendMessage(chatId, `
üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.</b>

–î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤:
<code>BTC long 45000</code>
        `, { parse_mode: 'HTML' });
        return;
    }

    let message = 'üéØ <b>–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –≤–∞—à–∏–º –ø–æ–∑–∏—Ü–∏—è–º:</b>\n\n';
    let hasSignals = false;
    
    for (const position of userPositions) {
        const marketData = await getMarketData(position.symbol);
        
        if (marketData) {
            const signals = generateMarketSignals(position, marketData);
            
            if (signals.length > 0) {
                hasSignals = true;
                const positionNumber = Array.from(positions.values()).filter(p => p.userId === userId && p.isActive).indexOf(position) + 1;
                message += `üìä <b>${position.symbol} #${positionNumber}</b> (${marketData.price}):\n`;
                signals.forEach(signal => {
                    message += `${signal.message}\n`;
                });
                message += '\n';
            }
        }
    }
    
    if (!hasSignals) {
        message += '‚úÖ <b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ</b>\n\n';
        message += 'üìä –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç, —Ä—ã–Ω–æ–∫ –≤ —Å–ø–æ–∫–æ–π–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏\n';
        message += 'üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä—ã–Ω–∫–æ–º!\n\n';
        message += '<i>–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö</i>';
    }
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ /balance - –æ–±—â–∏–π P&L
bot.onText(/\/balance/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    const userPositions = Array.from(positions.values()).filter(p => p.userId === userId && p.isActive);
    
    if (userPositions.length === 0) {
        bot.sendMessage(chatId, 'üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.</b>', { parse_mode: 'HTML' });
        return;
    }

    let totalPnL = 0;
    let totalInvested = 0;
    let positionsCount = userPositions.length;
    let profitablePositions = 0;
    
    const analysisMsg = await bot.sendMessage(chatId, 'üìä <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Ä—Ç—Ñ–µ–ª—å...</b>', { parse_mode: 'HTML' });
    
    for (const position of userPositions) {
        const marketData = await getMarketData(position.symbol);
        
        if (marketData) {
            const invested = position.entryPrice * position.quantity;
            totalInvested += invested;
            
            let pnl = 0;
            if (position.direction === 'long') {
                pnl = (marketData.price - position.entryPrice) * position.quantity;
            } else {
                pnl = (position.entryPrice - marketData.price) * position.quantity;
            }
            totalPnL += pnl;
            
            if (pnl > 0) profitablePositions++;
        }
    }
    
    const totalPnLPercent = totalInvested > 0 ? (totalPnL / totalInvested) * 100 : 0;
    const winRate = positionsCount > 0 ? (profitablePositions / positionsCount) * 100 : 0;
    const emoji = totalPnL >= 0 ? 'üü¢' : 'üî¥';
    const trendEmoji = totalPnL >= 0 ? 'üìà' : 'üìâ';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è
    let portfolioStatus = '';
    if (totalPnLPercent > 5) {
        portfolioStatus = 'üî• –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!';
    } else if (totalPnLPercent > 0) {
        portfolioStatus = '‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å –≤ –ø–ª—é—Å–µ';
    } else if (totalPnLPercent > -5) {
        portfolioStatus = '‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–∏–µ –ø–æ—Ç–µ—Ä–∏';
    } else {
        portfolioStatus = 'üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è';
    }
    
    const message = `
${emoji} <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è:</b>

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ <b>–û–±—â–∏–π P&L:</b> ${totalPnL >= 0 ? '+' : ''}${totalPnL.toFixed(2)} ${trendEmoji}
üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> ${totalPnLPercent >= 0 ? '+' : ''}${totalPnLPercent.toFixed(2)}%
üíµ <b>–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b> ${totalInvested.toFixed(2)}
üìà <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> ${positionsCount}
üéØ <b>–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> ${profitablePositions}/${positionsCount} (${winRate.toFixed(0)}%)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${portfolioStatus}

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
${totalPnLPercent > 10 ? '‚Ä¢ üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —á–∞—Å—Ç–∏—á–Ω—É—é —Ñ–∏–∫—Å–∞—Ü–∏—é –ø—Ä–∏–±—ã–ª–∏' : ''}
${totalPnLPercent < -10 ? '‚Ä¢ ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –ø–æ —É–±—ã—Ç–æ—á–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º' : ''}
${winRate < 40 ? '‚Ä¢ üìö –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤—Ö–æ–¥–æ–≤' : ''}
${winRate > 70 ? '‚Ä¢ üéØ –û—Ç–ª–∏—á–Ω—ã–π winrate! –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π' : ''}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /signals –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    `;
    
    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: analysisMsg.message_id,
        parse_mode: 'HTML'
    });
});

// –ö–æ–º–∞–Ω–¥–∞ /subscribe - –ø–æ–¥–ø–∏—Å–∫–∞
bot.onText(/\/subscribe/, (msg) => {
    const chatId = msg.chat.id;
    
    const message = `
üíé <b>AI Crypto Tracker Premium</b>

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω:</b>
‚Ä¢ –î–æ 3 –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑

üíé <b>Premium ($15/–º–µ—Å—è—Ü):</b>
‚Ä¢ ‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ ‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ AI-—Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞
‚Ä¢ ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∏—Ä–∂–∞–º–∏ (—Å–∫–æ—Ä–æ)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéÅ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>
–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!

üöÄ <b>–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>
–ù–∞–ø–∏—à–∏—Ç–µ @your_username

<i>Premium –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–º–æ–∂–µ—Ç –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏</i>
    `;
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    
    const message = `
üìã <b>–ü–æ–º–æ—â—å –ø–æ AI Crypto Tracker</b>

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:
<code>BTC long 45000</code>
<code>ETH short 3200, –¥–µ–ø–æ–∑–∏—Ç 1000</code>
<code>SOL long 180, —Ä–∞–∑–º–µ—Ä 5</code>

<b>üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/positions - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
/signals - –ü–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
/balance - –û–±—â–∏–π P&L –ø–æ—Ä—Ç—Ñ–µ–ª—è
/subscribe - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>üìà –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>
BTC, ETH, SOL, ADA, DOT, MATIC, LINK, UNI, AVAX, ATOM, XRP, DOGE, LTC, BCH

<b>üí° –¢–∏–ø—ã –ø–æ–∑–∏—Ü–∏–π:</b> long, short

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>ü§ñ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ –°—á–∏—Ç–∞–µ—Ç P&L –ø–æ –≤—Å–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –ù–∞–ø–∏—à–∏—Ç–µ @your_username
    `;
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
bot.onText(/\/close (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const positionNumber = parseInt(match[1]);
    
    const userPositions = Array.from(positions.values()).filter(p => p.userId === userId && p.isActive);
    
    if (positionNumber < 1 || positionNumber > userPositions.length) {
        bot.sendMessage(chatId, `‚ùå –ü–æ–∑–∏—Ü–∏—è #${positionNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /positions —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π.`);
        return;
    }
    
    const position = userPositions[positionNumber - 1];
    position.isActive = false;
    
    const user = users.get(userId);
    user.positionCount--;
    
    bot.sendMessage(chatId, `‚úÖ –ü–æ–∑–∏—Ü–∏—è ${position.symbol} ${position.direction.toUpperCase()} #${positionNumber} –∑–∞–∫—Ä—ã—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.`);
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
bot.onText(/\/admin (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const params = match[1].split(' ');
    
    if (params[0] !== ADMIN_PASSWORD) {
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        return;
    }
    
    const command = params[1];
    
    if (command === 'stats') {
        const totalUsers = users.size;
        const totalPositions = Array.from(positions.values()).filter(p => p.isActive).length;
        const premiumUsers = Array.from(users.values()).filter(u => u.isPremium).length;
        const dailyActiveUsers = Array.from(users.values()).filter(u => {
            const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            return u.registeredAt > dayAgo;
        }).length;
        
        const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI Crypto Tracker:</b>

üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${totalUsers}
üíé <b>Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${premiumUsers}
üìà <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> ${totalPositions}
üìÖ <b>–ù–æ–≤—ã—Ö –∑–∞ 24—á:</b> ${dailyActiveUsers}
üí∞ <b>Conversion rate:</b> ${totalUsers > 0 ? ((premiumUsers / totalUsers) * 100).toFixed(1) : 0}%

<b>–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:</b> ${new Date().toLocaleDateString()}
        `;
        
        bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        
    } else if (command === 'broadcast' && params[2]) {
        const broadcastMessage = params.slice(2).join(' ');
        let sentCount = 0;
        
        bot.sendMessage(chatId, 'üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
        
        (async () => {
            for (const user of users.values()) {
                try {
                    await bot.sendMessage(user.id, `üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç AI Crypto Tracker:</b>\n\n${broadcastMessage}`, { parse_mode: 'HTML' });
                    sentCount++;
                    await new Promise(resolve => setTimeout(resolve, 100)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
                }
            }
            
            bot.sendMessage(chatId, `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
        })();
    }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
setInterval(async () => {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    for (const position of positions.values()) {
        if (!position.isActive) continue;
        
        try {
            const marketData = await getMarketData(position.symbol);
            if (!marketData) continue;
            
            const signals = generateMarketSignals(position, marketData);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
            const criticalSignals = signals.filter(s => s.type === 'warning' || s.type === 'profit');
            
            if (criticalSignals.length > 0) {
                const currentPrice = marketData.price;
                let pnl = 0;
                
                if (position.direction === 'long') {
                    pnl = (currentPrice - position.entryPrice) * position.quantity;
                } else {
                    pnl = (position.entryPrice - currentPrice) * position.quantity;
                }
                
                const pnlPercent = ((pnl / (position.quantity * position.entryPrice)) * 100);
                
                const message = `
üö® <b>–í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ${position.symbol}!</b>

üìä <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${currentPrice}
üìà <b>P&L:</b> ${pnl >= 0 ? '+' : ''}${pnl.toFixed(2)} (${pnlPercent >= 0 ? '+' : ''}${pnlPercent.toFixed(2)}%)

<b>–°–∏–≥–Ω–∞–ª—ã:</b>
${criticalSignals.map(s => `‚Ä¢ ${s.message}`).join('\n')}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∏—Ü–∏—é: /positions
                `;
                
                await bot.sendMessage(position.userId, message, { parse_mode: 'HTML' });
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }
}, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

// –î–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render.com
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
    res.send(`
        <h1>ü§ñ AI Crypto Tracker Bot</h1>
        <p>Bot is running successfully!</p>
        <p>Find the bot: <a href="https://t.me/AICryptoTrackerBot">@AICryptoTrackerBot</a></p>
        <p>Status: ‚úÖ Online</p>
        <p>Users: ${users.size}</p>
        <p>Active Positions: ${Array.from(positions.values()).filter(p => p.isActive).length}</p>
    `);
});

app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        uptime: process.uptime(),
        users: users.size,
        positions: Array.from(positions.values()).filter(p => p.isActive).length
    });
});

app.listen(PORT, () => {
    console.log(`üöÄ AI Crypto Tracker Bot –∑–∞–ø—É—â–µ–Ω!`);
    console.log(`üåê Server running on port ${PORT}`);
    console.log(`üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram`);
    console.log(`üîß –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å YOUR_BOT_TOKEN_HERE –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω!`);
});

console.log('ü§ñ AI Crypto Tracker Bot v2.0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
