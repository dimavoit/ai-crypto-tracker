/**
 * ü§ñ AI Crypto Tracker Bot v3.0
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–∑–∏—Ü–∏–π
 * - Binance primary API, CoinGecko fallback
 * - –°–∏–≥–Ω–∞–ª—ã, P&L, –±–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è
 * - Deploy –Ω–∞ Render
 */

const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const express = require("express");

// ---------------- CONFIG -----------------
const BOT_TOKEN = process.env.BOT_TOKEN || "YOUR_BOT_TOKEN_HERE";
const PORT = process.env.PORT || 10000;
const ADMIN_PASSWORD = process.env.ADMIN_PASS || "crypto123";

// ---------------- STATE -----------------
const users = new Map();       // userId ‚Üí user info
const positions = new Map();   // posId ‚Üí position

// Binance trading pairs
const binancePair = {
  BTC: "BTCUSDT", ETH: "ETHUSDT", SOL: "SOLUSDT", ADA: "ADAUSDT",
  DOT: "DOTUSDT", MATIC: "MATICUSDT", LINK: "LINKUSDT", UNI: "UNIUSDT",
  AVAX: "AVAXUSDT", ATOM: "ATOMUSDT", XRP: "XRPUSDT", DOGE: "DOGEUSDT",
  LTC: "LTCUSDT", BCH: "BCHUSDT"
};

// CoinGecko mapping
const symbolMapping = {
  BTC: "bitcoin", ETH: "ethereum", SOL: "solana", ADA: "cardano",
  DOT: "polkadot", MATIC: "matic-network", LINK: "chainlink", UNI: "uniswap",
  AVAX: "avalanche-2", ATOM: "cosmos", XRP: "ripple", DOGE: "dogecoin",
  LTC: "litecoin", BCH: "bitcoin-cash"
};

// ---------------- HELPERS ----------------
function round(v, d = 2) {
  return Math.round(v * Math.pow(10, d)) / Math.pow(10, d);
}

function calcVolatility(prices) {
  const returns = [];
  for (let i = 1; i < prices.length; i++) {
    const r = (prices[i] - prices[i - 1]) / prices[i - 1];
    if (Number.isFinite(r)) returns.push(r);
  }
  const variance = returns.reduce((a, b) => a + b * b, 0) / returns.length;
  return Math.sqrt(variance) * Math.sqrt(365) * 100;
}

// ---------------- MARKET DATA ----------------
async function fetchFromBinance(symbol) {
  const pair = binancePair[symbol];
  if (!pair) throw new Error("PAIR_NOT_SUPPORTED");

  const [tickerRes, klinesRes] = await Promise.all([
    axios.get("https://api.binance.com/api/v3/ticker/24hr", { params: { symbol: pair } }),
    axios.get("https://api.binance.com/api/v3/klines", { params: { symbol: pair, interval: "1h", limit: 168 } })
  ]);

  const t = tickerRes.data;
  const kl = klinesRes.data;
  const prices = kl.map(k => parseFloat(k[4]));
  const volumes = kl.map(k => parseFloat(k[7]));

  return {
    price: parseFloat(t.lastPrice),
    change24h: parseFloat(t.priceChangePercent),
    volume24h: parseFloat(t.quoteVolume),
    high7d: Math.max(...prices),
    low7d: Math.min(...prices),
    avgVolume: volumes.reduce((a, b) => a + b, 0) / volumes.length,
    volatility: calcVolatility(prices),
    support: Math.min(...prices) * 1.02,
    resistance: Math.max(...prices) * 0.98
  };
}

async function fetchFromCoinGecko(symbol) {
  const coinId = symbolMapping[symbol];
  if (!coinId) throw new Error("COIN_NOT_SUPPORTED");

  const [priceRes, historyRes] = await Promise.all([
    axios.get(`https://api.coingecko.com/api/v3/simple/price?ids=${coinId}&vs_currencies=usd&include_24hr_change=true&include_24hr_vol=true`),
    axios.get(`https://api.coingecko.com/api/v3/coins/${coinId}/market_chart?vs_currency=usd&days=7`)
  ]);

  const pd = priceRes.data[coinId];
  const hd = historyRes.data;
  const prices = hd.prices.map(p => p[1]);
  const volumes = hd.total_volumes.map(v => v[1]);

  return {
    price: pd.usd,
    change24h: pd.usd_24h_change,
    volume24h: pd.usd_24h_vol,
    high7d: Math.max(...prices),
    low7d: Math.min(...prices),
    avgVolume: volumes.reduce((a, b) => a + b, 0) / volumes.length,
    volatility: calcVolatility(prices),
    support: Math.min(...prices) * 1.02,
    resistance: Math.max(...prices) * 0.98
  };
}

async function getMarketData(symbol) {
  try {
    return await fetchFromBinance(symbol);
  } catch {
    try {
      return await fetchFromCoinGecko(symbol);
    } catch {
      return null;
    }
  }
}

// ---------------- POSITION LOGIC ----------------
function calculateOptimalLevels(entryPrice, direction, marketData, riskPercent = 4) {
  const { support, resistance, volatility } = marketData;
  let stopLoss, takeProfit;

  if (direction === "long") {
    const buffer = entryPrice * (volatility / 100) * 0.5;
    stopLoss = Math.min(support - buffer, entryPrice * (1 - riskPercent / 100));
    const risk = entryPrice - stopLoss;
    takeProfit = Math.max(resistance, entryPrice + risk * 2);
  } else {
    const buffer = entryPrice * (volatility / 100) * 0.5;
    stopLoss = Math.max(resistance + buffer, entryPrice * (1 + riskPercent / 100));
    const risk = stopLoss - entryPrice;
    takeProfit = Math.min(support, entryPrice - risk * 2);
  }
  return { stopLoss: round(stopLoss, 2), takeProfit: round(takeProfit, 2) };
}

function calculatePnL(pos, price) {
  let pnl = 0;
  if (pos.direction === "long") pnl = (price - pos.entryPrice) * pos.quantity;
  else pnl = (pos.entryPrice - price) * pos.quantity;
  return pnl;
}

// ---------------- BOT ----------------
if (!BOT_TOKEN || BOT_TOKEN === "YOUR_BOT_TOKEN_HERE") {
  console.warn("‚ö†Ô∏è BOT_TOKEN not set!");
} else {
  const bot = new TelegramBot(BOT_TOKEN, { polling: true });

  // --- START ---
  bot.onText(/\/start/, (msg) => {
    const welcomeMessage = `
ü§ñ <b>AI Crypto Tracker Bot</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

üöÄ <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø AI Crypto Tracker.  
–Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –∫—Ä–∏–ø—Ç–æ–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.  

<b>–ß—Ç–æ —è —É–º–µ—é:</b>  
üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ç–æ–ø-–ª–æ—Å—Å—ã/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã  
üí° –î–∞—é —Å–∏–≥–Ω–∞–ª—ã –∫–æ–≥–¥–∞ –ø–æ—Ä–∞ –¥–æ–±–∏—Ä–∞—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å  
üìà –°—á–∏—Ç–∞—é P&L –ø–æ –≤—Å–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é  
‚ö° –ü—Ä–∏—Å—ã–ª–∞—é –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è  

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:</b> BTC, ETH, SOL, ADA, DOT, MATIC, LINK, UNI, AVAX, ATOM  

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ <b>–î–æ–±–∞–≤–∏–º –≤–∞—à—É –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é?</b>  

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:  
<code>BTC long 45000</code>  
<code>ETH short 3200, –¥–µ–ø–æ–∑–∏—Ç 1000</code>  
<code>SOL long 180, —Ä–∞–∑–º–µ—Ä 5</code>  

ü§ñ –Ø —Å–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏! üöÄ
    `;
    bot.sendMessage(msg.chat.id, welcomeMessage, { parse_mode: "HTML" });
  });

  // --- ADD POSITION ---
  bot.on("message", async (msg) => {
    if (!msg.text || msg.text.startsWith("/")) return;
    const text = msg.text.toUpperCase();
    const symbol = Object.keys(binancePair).find(s => text.includes(s));
    const direction = text.includes("LONG") ? "long" : text.includes("SHORT") ? "short" : null;
    const priceMatch = text.match(/(\d+(\.\d+)?)/);
    const depositMatch = text.match(/DEPOSIT\s*(\d+)/i) || text.match(/–î–ï–ü–û–ó–ò–¢\s*(\d+)/i);

    if (!symbol || !direction || !priceMatch) {
      bot.sendMessage(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: BTC long 45000 deposit 1000");
      return;
    }

    const entry = parseFloat(priceMatch[1]);
    const deposit = depositMatch ? parseFloat(depositMatch[1]) : null;

    const marketData = await getMarketData(symbol);
    if (!marketData) {
      bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
      return;
    }

    const levels = calculateOptimalLevels(entry, direction, marketData);
    const qty = deposit ? round(deposit / entry, 4) : 1;

    const posId = `${msg.from.id}_${Date.now()}`;
    const position = {
      id: posId, userId: msg.from.id, symbol,
      direction, entryPrice: entry, stopLoss: levels.stopLoss, takeProfit: levels.takeProfit,
      quantity: qty, isActive: true
    };
    positions.set(posId, position);

    bot.sendMessage(msg.chat.id,
      `‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${symbol} ${direction.toUpperCase()}\n–í—Ö–æ–¥: $${entry}\nSL: $${levels.stopLoss}\nTP: $${levels.takeProfit}\n–†–∞–∑–º–µ—Ä: ${qty}`
    );
  });

  // --- POSITIONS ---
  bot.onText(/\/positions/, async (msg) => {
    const userPos = Array.from(positions.values()).filter(p => p.userId === msg.from.id && p.isActive);
    if (!userPos.length) return bot.sendMessage(msg.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.");
    let text = "üìä <b>–í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n";
    for (const [i, p] of userPos.entries()) {
      const md = await getMarketData(p.symbol);
      const pnl = md ? calculatePnL(p, md.price) : 0;
      const pnlPct = md ? (pnl / (p.entryPrice * p.quantity)) * 100 : 0;
      text += `${i+1}. ${p.symbol} ${p.direction.toUpperCase()} | –í—Ö–æ–¥ $${p.entryPrice} | –¢–µ–∫—É—â–∞—è $${md?.price || "N/A"}\nP&L: ${pnl.toFixed(2)} (${pnlPct.toFixed(2)}%) | SL $${p.stopLoss} | TP $${p.takeProfit}\n\n`;
    }
    bot.sendMessage(msg.chat.id, text, { parse_mode: "HTML" });
  });

  // --- BALANCE ---
  bot.onText(/\/balance/, async (msg) => {
    const userPos = Array.from(positions.values()).filter(p => p.userId === msg.from.id && p.isActive);
    if (!userPos.length) return bot.sendMessage(msg.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.");
    let total = 0, invested = 0;
    for (const p of userPos) {
      const md = await getMarketData(p.symbol);
      if (!md) continue;
      invested += p.entryPrice * p.quantity;
      total += calculatePnL(p, md.price);
    }
    const pct = invested > 0 ? (total / invested) * 100 : 0;
    bot.sendMessage(msg.chat.id, `üí∞ –û–±—â–∏–π P&L: ${total.toFixed(2)} USD (${pct.toFixed(2)}%)`);
  });

  // --- HELP ---
  bot.onText(/\/help/, (msg) => {
    bot.sendMessage(msg.chat.id, `
üìã <b>–ü–æ–º–æ—â—å</b>

/positions - —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π  
/balance - –æ–±—â–∏–π P&L  
/close N - –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é  
/subscribe - –ø—Ä–µ–º–∏—É–º  

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∏—Ü–∏—é:  
<code>BTC long 45000</code>  
<code>ETH short 3200 deposit 1000</code>  
    `, { parse_mode: "HTML" });
  });
}

// ---------------- EXPRESS ----------------
const appServer = express();
appServer.get("/", (req, res) => res.send("ü§ñ AI Crypto Tracker Bot is running"));
appServer.get("/health", (req, res) => res.json({ status: "OK", uptime: process.uptime(), users: users.size, positions: positions.size }));
appServer.listen(PORT, () => console.log(`üöÄ Server running on ${PORT}`));
